'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useState, useEffect } from 'react';
import { 
    LayoutDashboard, 
    Settings, 
    BarChart, 
    Wrench,
    CreditCard,
    Users,
    Building2,
    Brain,
    Globe,
    LogOut,
    ChevronUp,
    UserCircle,
    BookOpen
} from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/lib/supabase';

type NavItem = {
    href: string;
    label: string;
    icon: React.ReactNode;
};

export default function Sidebar({ userRole }: { userRole: string }) {
    const pathname = usePathname();
    const { user, signOut } = useAuth();
    const [profileOpen, setProfileOpen] = useState(false);
    const [issuerStatus, setIssuerStatus] = useState<string | null>(null);

    const getNavItems = () => {
        const orgId = user?.organization_id;
        
        const navigationByRole: Record<string, NavItem[]> = {
            admin: [
                { href: '/dashboard/admin', label: 'Dashboard', icon: <LayoutDashboard className="w-5 h-5" /> },
                { href: '/dashboard/admin/sponsors', label: 'Sponsors', icon: <Building2 className="w-5 h-5" /> },
                { href: '/dashboard/admin/users', label: 'Users', icon: <Users className="w-5 h-5" /> },
                { href: '/dashboard/admin/tools', label: 'Tools', icon: <Wrench className="w-5 h-5" /> },
                { href: '/dashboard/admin/analytics', label: 'Analytics', icon: <BarChart className="w-5 h-5" /> },
                { href: '/dashboard/admin/knowledge', label: 'Knowledge Vault', icon: <Brain className="w-5 h-5" /> },
                { href: '/dashboard/admin/billing', label: 'Billing', icon: <CreditCard className="w-5 h-5" /> },
                { href: '/dashboard/admin/global', label: 'Global Settings', icon: <Globe className="w-5 h-5" /> },
                { href: '/dashboard/admin/settings', label: 'Settings', icon: <Settings className="w-5 h-5" /> }
            ],
            exchange_sponsor: [
                { href: `/dashboard/sponsor/${orgId}`, label: 'Dashboard', icon: <LayoutDashboard className="w-5 h-5" /> },
                { href: `/dashboard/sponsor/${orgId}/listings`, label: 'Listings', icon: <Building2 className="w-5 h-5" /> },
                { href: `/dashboard/sponsor/${orgId}/clients`, label: 'Clients', icon: <Users className="w-5 h-5" /> },
                { href: `/dashboard/sponsor/${orgId}/tools`, label: 'Tools', icon: <Wrench className="w-5 h-5" /> },
                { href: `/dashboard/sponsor/${orgId}/analytics`, label: 'Analytics', icon: <BarChart className="w-5 h-5" /> },
                { href: `/dashboard/sponsor/${orgId}/knowledge-vault`, label: 'Knowledge Vault', icon: <Brain className="w-5 h-5" /> },
                { href: `/dashboard/sponsor/${orgId}/billing`, label: 'Billing', icon: <CreditCard className="w-5 h-5" /> },
                { href: `/dashboard/sponsor/${orgId}/settings`, label: 'Settings', icon: <Settings className="w-5 h-5" /> }
            ],
            exchange: [
                { href: '/dashboard/exchange', label: 'Dashboard', icon: <LayoutDashboard className="w-5 h-5" /> },
                { href: '/dashboard/exchange/listings', label: 'Listings', icon: <Building2 className="w-5 h-5" /> },
                { href: '/dashboard/exchange/tools', label: 'Tools', icon: <Wrench className="w-5 h-5" /> },
                { href: '/dashboard/exchange/analytics', label: 'Analytics', icon: <BarChart className="w-5 h-5" /> },
                { href: '/dashboard/exchange/settings', label: 'Settings', icon: <Settings className="w-5 h-5" /> },
            ],
            issuer: [
                { href: '/dashboard/issuer', label: 'Overview', icon: <LayoutDashboard className="w-5 h-5" /> },
                { href: '/dashboard/issuer/listings', label: 'Listings', icon: <Building2 className="w-5 h-5" /> },
                { href: '/dashboard/issuer/tools', label: 'Tools', icon: <Wrench className="w-5 h-5" /> },
                { href: '/dashboard/issuer/knowledge-vault', label: 'Knowledge Vault', icon: <Brain className="w-5 h-5" /> },
                { href: '/dashboard/issuer/settings', label: 'Settings', icon: <Settings className="w-5 h-5" /> },
            ],
        };

        return navigationByRole[userRole] || [];
    };

    const navItems = getNavItems();

    useEffect(() => {
        if (userRole === 'issuer') {
            const fetchIssuerStatus = async () => {
                const { data } = await supabase
                    .from('issuers')
                    .select('status')
                    .single();
                
                if (data) {
                    setIssuerStatus(data.status);
                }
            };
            
            fetchIssuerStatus();
        }
    }, [userRole]);

    const filteredNavItems = navItems.filter(item => {
        if (userRole === 'issuer' && item.label === 'Knowledge Vault') {
            return issuerStatus === 'approved';
        }
        return true;
    });

    return (
        <div className="flex flex-col w-64 bg-blue-900 h-screen">
            <div className="flex-1 flex flex-col pt-5 overflow-y-auto">
                <div className="flex items-center flex-shrink-0 px-4">
                    <span className="text-xl font-bold text-white">Exlayr</span>
                </div>
                <nav className="mt-5 flex-1 px-2 space-y-1">
                    {filteredNavItems.map((item) => {
                        const isActive = pathname === item.href;
                        return (
                            <Link
                                key={item.href}
                                href={item.href}
                                className={`group flex items-center px-2 py-2 text-sm font-medium rounded-md ${
                                    isActive
                                        ? 'bg-blue-800 text-white'
                                        : 'text-blue-100 hover:bg-blue-800 hover:text-white'
                                }`}
                            >
                                <span className="text-blue-100 group-hover:text-white">
                                    {item.icon}
                                </span>
                                <span className="ml-3">{item.label}</span>
                            </Link>
                        );
                    })}
                </nav>
            </div>

            {/* Profile Section */}
            <div className="border-t border-blue-800 p-4">
                <button
                    onClick={() => setProfileOpen(!profileOpen)}
                    className="flex items-center w-full text-blue-100 hover:text-white"
                >
                    <div className="flex-shrink-0">
                        <div className="h-8 w-8 rounded-full bg-blue-800 flex items-center justify-center">
                            <UserCircle className="h-6 w-6" />
                        </div>
                    </div>
                    <div className="ml-3 flex-1">
                        <p className="text-sm font-medium">{user?.email}</p>
                        <p className="text-xs">{user?.account_type}</p>
                    </div>
                    <ChevronUp className={`ml-2 h-5 w-5 transform transition-transform ${profileOpen ? '' : 'rotate-180'}`} />
                </button>

                {/* Profile Dropdown */}
                {profileOpen && (
                    <div className="mt-3 px-2 space-y-1">
                        <Link
                            href={`/dashboard/${userRole}/profile`}
                            className="group flex items-center px-2 py-2 text-sm font-medium rounded-md text-blue-100 hover:text-white hover:bg-blue-800"
                        >
                            <UserCircle className="mr-3 h-5 w-5" />
                            Profile
                        </Link>
                        <Link
                            href={`/dashboard/${userRole}/settings`}
                            className="group flex items-center px-2 py-2 text-sm font-medium rounded-md text-blue-100 hover:text-white hover:bg-blue-800"
                        >
                            <Settings className="mr-3 h-5 w-5" />
                            Settings
                        </Link>
                        <button
                            onClick={signOut}
                            className="w-full group flex items-center px-2 py-2 text-sm font-medium rounded-md text-red-300 hover:text-red-200 hover:bg-blue-800"
                        >
                            <LogOut className="mr-3 h-5 w-5" />
                            Sign out
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
} 